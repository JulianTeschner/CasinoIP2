name: Run Tests

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

env:
  APP_USERNAME: root
  APP_PASSWORD: root
  APP_DATABASE: test
  APP_TEST_DATABASE: test
  APP_HOST: 127.0.0.1
  APP_PORT: 27017

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.17.x]
      #  os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./backend
    services:
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ env.APP_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ env.APP_PASSWORD }}
          MONGO_INITDB_ROOT_DATABASE: ${{ env.APP_DATABASE }}
          MONGO_INITDB_TEST_DATABASE: ${{ env.APP_TEST_DATABASE }}
          MONGO_INITDB_ROOT_HOST: ${{ env.APP_HOST }}
          MONGO_INITDB_ROOT_PORT: ${{ env.APP_PORT }}
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017            
    
    steps:

    # Get values for cache paths to be used in later steps
    - id: go-cache-paths
      run: |
        echo "::set-output name=go-build::$(go env GOCACHE)"
        echo "::set-output name=go-mod::$(go env GOMODCACHE)"
        
    - name: checkout
      uses: actions/checkout@v3

    # Cache go build cache, used to speedup go test
    - name: Go Build Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-build }}
        key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

    # Cache go mod cache, used to speedup builds
    - name: Go Mod Cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
        
    - uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
    - name: Run Tests
      run: |
        go test ./... -coverprofile coverage.out -covermode count
        go tool cover -func coverage.out
      env:
        MONGO_INITDB_ROOT_USERNAME: ${{ env.APP_USERNAME }}
        MONGO_INITDB_ROOT_PASSWORD: ${{ env.APP_PASSWORD }}
        MONGO_INITDB_ROOT_DATABASE: ${{ env.APP_DATABASE }}
        MONGO_INITDB_TEST_DATABASE: ${{ env.APP_TEST_DATABASE }}
        MONGO_INITDB_ROOT_HOST: ${{ env.APP_HOST }}
        MONGO_INITDB_ROOT_PORT: ${{ env.APP_PORT }}
      
        
    - name: Quality Gate - Test coverage shall be above threshold
      env:
          TESTCOVERAGE_THRESHOLD: 75
      run: |
            echo "Quality Gate: checking test coverage is above threshold ..."
            echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
            totalCoverage=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
            echo "Current test coverage : $totalCoverage %"
            if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 > $2)}') )); then
                echo "OK"
            else
                echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
                echo "Failed"
                exit 1
            fi
